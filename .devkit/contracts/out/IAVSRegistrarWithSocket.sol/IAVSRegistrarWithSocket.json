{"abi":[{"type":"function","name":"deregisterOperator","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"avs","type":"address","internalType":"address"},{"name":"operatorSetIds","type":"uint32[]","internalType":"uint32[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getOperatorSocket","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"registerOperator","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"avs","type":"address","internalType":"address"},{"name":"operatorSetIds","type":"uint32[]","internalType":"uint32[]"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"supportsAVS","inputs":[{"name":"avs","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"updateSocket","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"socket","type":"string","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"OperatorSocketSet","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"socket","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"error","name":"CallerNotOperator","inputs":[]},{"type":"error","name":"DataLengthMismatch","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"deregisterOperator(address,address,uint32[])":"303ca956","getOperatorSocket(address)":"8481931d","registerOperator(address,address,uint32[],bytes)":"c63fd502","supportsAVS(address)":"b5265787","updateSocket(address,string)":"6591666a"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CallerNotOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataLengthMismatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"socket\",\"type\":\"string\"}],\"name\":\"OperatorSocketSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"operatorSetIds\",\"type\":\"uint32[]\"}],\"name\":\"deregisterOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getOperatorSocket\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"operatorSetIds\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"registerOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"}],\"name\":\"supportsAVS\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"socket\",\"type\":\"string\"}],\"name\":\"updateSocket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deregisterOperator(address,address,uint32[])\":{\"params\":{\"avs\":\"the AVS the operator is deregistering from. This should be the same as IAVSRegistrar.avs()\",\"operator\":\"the deregistering operator\",\"operatorSetIds\":\"the list of operator set ids being deregistered from\"}},\"getOperatorSocket(address)\":{\"params\":{\"operator\":\"The operator to get the socket for.\"},\"returns\":{\"_0\":\"The socket for the operator.\"}},\"registerOperator(address,address,uint32[],bytes)\":{\"params\":{\"avs\":\"the AVS the operator is registering for. This should be the same as IAVSRegistrar.avs()\",\"data\":\"arbitrary data the operator can provide as part of registration\",\"operator\":\"the registering operator\",\"operatorSetIds\":\"the list of operator set ids being registered for\"}},\"supportsAVS(address)\":{\"params\":{\"avs\":\"the AVS to check\"},\"returns\":{\"_0\":\"true if the AVS is supported, false otherwise\"}},\"updateSocket(address,string)\":{\"details\":\"This function can only be called by the operator themselves.\",\"params\":{\"operator\":\"The operator to set the socket for.\",\"socket\":\"The socket to set for the operator.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"CallerNotOperator()\":[{\"notice\":\"Thrown when the caller is not the operator\"}],\"DataLengthMismatch()\":[{\"notice\":\"Thrown when the data length mismatch\"}]},\"events\":{\"OperatorSocketSet(address,string)\":{\"notice\":\"Emitted when an operator socket is set\"}},\"kind\":\"user\",\"methods\":{\"deregisterOperator(address,address,uint32[])\":{\"notice\":\"Called by the AllocationManager when an operator is deregistered from one or more operator sets. If this method reverts, it is ignored.\"},\"getOperatorSocket(address)\":{\"notice\":\"Gets the socket for an operator.\"},\"registerOperator(address,address,uint32[],bytes)\":{\"notice\":\"Called by the AllocationManager when an operator wants to register for one or more operator sets. This method should revert if registration is unsuccessful.\"},\"supportsAVS(address)\":{\"notice\":\"Returns true if the AVS is supported by the registrar\"},\"updateSocket(address,string)\":{\"notice\":\"Updates the socket for an operator.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/src/interfaces/IAVSRegistrarWithSocket.sol\":\"IAVSRegistrarWithSocket\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":@eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":@project/=../../contracts/src/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"]},\"sources\":{\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IAVSRegistrar.sol\":{\"keccak256\":\"0xbb209da899a3379d83c18eabd4760e3385b999f640bdfcc25ce3fa5c1edc166d\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://5a2c745f7ea19dbbd7248a98c39385f7e4aeb9e86975393f249e1aa3804598dc\",\"dweb:/ipfs/QmdeyCYp5EhJNCjsx8ydFxyqwdpFwpj4iiVoesQVKvsRjm\"]},\"lib/eigenlayer-middleware/src/interfaces/IAVSRegistrarWithSocket.sol\":{\"keccak256\":\"0xbd37b4c702ef8fe9e6f74aef59e21f6100adbb7284391a33ae046ced9c43b93d\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://cb3c121fd8d30ab0310bb7e4da2bef41d2a6b29f7f86f0bc446742eb7de239e1\",\"dweb:/ipfs/QmbzDU8i4pMsztga8trmhsghFUeNeiQnt7wduoBS34LNXz\"]},\"lib/eigenlayer-middleware/src/interfaces/ISocketRegistryV2.sol\":{\"keccak256\":\"0xa65012d0670c06815d49c8a64c5d437be4ca566190d444140e481f1299bc2916\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://86f36f5e6ab40639ea28813b515120b82efb5f6b72294a0f85671f0de2f8db53\",\"dweb:/ipfs/QmQc1YG7UHR6TFnxS7rD5wTnVRBKVCHyUqvgFbVX5zUN6d\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"CallerNotOperator"},{"inputs":[],"type":"error","name":"DataLengthMismatch"},{"inputs":[{"internalType":"address","name":"operator","type":"address","indexed":true},{"internalType":"string","name":"socket","type":"string","indexed":false}],"type":"event","name":"OperatorSocketSet","anonymous":false},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"avs","type":"address"},{"internalType":"uint32[]","name":"operatorSetIds","type":"uint32[]"}],"stateMutability":"nonpayable","type":"function","name":"deregisterOperator"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function","name":"getOperatorSocket","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"avs","type":"address"},{"internalType":"uint32[]","name":"operatorSetIds","type":"uint32[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"registerOperator"},{"inputs":[{"internalType":"address","name":"avs","type":"address"}],"stateMutability":"view","type":"function","name":"supportsAVS","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"string","name":"socket","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"updateSocket"}],"devdoc":{"kind":"dev","methods":{"deregisterOperator(address,address,uint32[])":{"params":{"avs":"the AVS the operator is deregistering from. This should be the same as IAVSRegistrar.avs()","operator":"the deregistering operator","operatorSetIds":"the list of operator set ids being deregistered from"}},"getOperatorSocket(address)":{"params":{"operator":"The operator to get the socket for."},"returns":{"_0":"The socket for the operator."}},"registerOperator(address,address,uint32[],bytes)":{"params":{"avs":"the AVS the operator is registering for. This should be the same as IAVSRegistrar.avs()","data":"arbitrary data the operator can provide as part of registration","operator":"the registering operator","operatorSetIds":"the list of operator set ids being registered for"}},"supportsAVS(address)":{"params":{"avs":"the AVS to check"},"returns":{"_0":"true if the AVS is supported, false otherwise"}},"updateSocket(address,string)":{"details":"This function can only be called by the operator themselves.","params":{"operator":"The operator to set the socket for.","socket":"The socket to set for the operator."}}},"version":1},"userdoc":{"kind":"user","methods":{"deregisterOperator(address,address,uint32[])":{"notice":"Called by the AllocationManager when an operator is deregistered from one or more operator sets. If this method reverts, it is ignored."},"getOperatorSocket(address)":{"notice":"Gets the socket for an operator."},"registerOperator(address,address,uint32[],bytes)":{"notice":"Called by the AllocationManager when an operator wants to register for one or more operator sets. This method should revert if registration is unsuccessful."},"supportsAVS(address)":{"notice":"Returns true if the AVS is supported by the registrar"},"updateSocket(address,string)":{"notice":"Updates the socket for an operator."}},"version":1}},"settings":{"remappings":["@eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/","@eigenlayer-middleware/=lib/eigenlayer-middleware/","@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/","@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/","@project/=../../contracts/src/","ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/","eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/","eigenlayer-middleware/=lib/eigenlayer-middleware/","erc4626-tests/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/","openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/","openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/","openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/","zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/eigenlayer-middleware/src/interfaces/IAVSRegistrarWithSocket.sol":"IAVSRegistrarWithSocket"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IAVSRegistrar.sol":{"keccak256":"0xbb209da899a3379d83c18eabd4760e3385b999f640bdfcc25ce3fa5c1edc166d","urls":["bzz-raw://5a2c745f7ea19dbbd7248a98c39385f7e4aeb9e86975393f249e1aa3804598dc","dweb:/ipfs/QmdeyCYp5EhJNCjsx8ydFxyqwdpFwpj4iiVoesQVKvsRjm"],"license":"BUSL-1.1"},"lib/eigenlayer-middleware/src/interfaces/IAVSRegistrarWithSocket.sol":{"keccak256":"0xbd37b4c702ef8fe9e6f74aef59e21f6100adbb7284391a33ae046ced9c43b93d","urls":["bzz-raw://cb3c121fd8d30ab0310bb7e4da2bef41d2a6b29f7f86f0bc446742eb7de239e1","dweb:/ipfs/QmbzDU8i4pMsztga8trmhsghFUeNeiQnt7wduoBS34LNXz"],"license":"BUSL-1.1"},"lib/eigenlayer-middleware/src/interfaces/ISocketRegistryV2.sol":{"keccak256":"0xa65012d0670c06815d49c8a64c5d437be4ca566190d444140e481f1299bc2916","urls":["bzz-raw://86f36f5e6ab40639ea28813b515120b82efb5f6b72294a0f85671f0de2f8db53","dweb:/ipfs/QmQc1YG7UHR6TFnxS7rD5wTnVRBKVCHyUqvgFbVX5zUN6d"],"license":"BUSL-1.1"}},"version":1},"id":34}