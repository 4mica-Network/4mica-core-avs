{"abi":[{"type":"function","name":"getOperatorCount","inputs":[{"name":"operatorSet","type":"tuple","internalType":"struct OperatorSet","components":[{"name":"avs","type":"address","internalType":"address"},{"name":"id","type":"uint32","internalType":"uint32"}]},{"name":"referenceTimestamp","type":"uint32","internalType":"uint32"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getOperatorSetOwner","inputs":[{"name":"operatorSet","type":"tuple","internalType":"struct OperatorSet","components":[{"name":"avs","type":"address","internalType":"address"},{"name":"id","type":"uint32","internalType":"uint32"}]}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getTotalStakeWeights","inputs":[{"name":"operatorSet","type":"tuple","internalType":"struct OperatorSet","components":[{"name":"avs","type":"address","internalType":"address"},{"name":"id","type":"uint32","internalType":"uint32"}]},{"name":"referenceTimestamp","type":"uint32","internalType":"uint32"}],"outputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"isReferenceTimestampSet","inputs":[{"name":"operatorSet","type":"tuple","internalType":"struct OperatorSet","components":[{"name":"avs","type":"address","internalType":"address"},{"name":"id","type":"uint32","internalType":"uint32"}]},{"name":"referenceTimestamp","type":"uint32","internalType":"uint32"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"latestReferenceTimestamp","inputs":[{"name":"operatorSet","type":"tuple","internalType":"struct OperatorSet","components":[{"name":"avs","type":"address","internalType":"address"},{"name":"id","type":"uint32","internalType":"uint32"}]}],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"maxOperatorTableStaleness","inputs":[{"name":"operatorSet","type":"tuple","internalType":"struct OperatorSet","components":[{"name":"avs","type":"address","internalType":"address"},{"name":"id","type":"uint32","internalType":"uint32"}]}],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"event","name":"MaxStalenessPeriodUpdated","inputs":[{"name":"operatorSet","type":"tuple","indexed":false,"internalType":"struct OperatorSet","components":[{"name":"avs","type":"address","internalType":"address"},{"name":"id","type":"uint32","internalType":"uint32"}]},{"name":"maxStalenessPeriod","type":"uint32","indexed":false,"internalType":"uint32"}],"anonymous":false},{"type":"event","name":"OperatorSetOwnerUpdated","inputs":[{"name":"operatorSet","type":"tuple","indexed":false,"internalType":"struct OperatorSet","components":[{"name":"avs","type":"address","internalType":"address"},{"name":"id","type":"uint32","internalType":"uint32"}]},{"name":"owner","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"error","name":"ArrayLengthMismatch","inputs":[]},{"type":"error","name":"CertificateStale","inputs":[]},{"type":"error","name":"OnlyTableUpdater","inputs":[]},{"type":"error","name":"ReferenceTimestampDoesNotExist","inputs":[]},{"type":"error","name":"RootDisabled","inputs":[]},{"type":"error","name":"TableUpdateStale","inputs":[]},{"type":"error","name":"VerificationFailed","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getOperatorCount((address,uint32),uint32)":"23c2a3cb","getOperatorSetOwner((address,uint32))":"84818920","getTotalStakeWeights((address,uint32),uint32)":"7d1d1f5b","isReferenceTimestampSet((address,uint32),uint32)":"cd83a72b","latestReferenceTimestamp((address,uint32))":"5ddb9b5b","maxOperatorTableStaleness((address,uint32))":"6141879e"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificateStale\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyTableUpdater\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReferenceTimestampDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RootDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TableUpdateStale\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VerificationFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct OperatorSet\",\"name\":\"operatorSet\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxStalenessPeriod\",\"type\":\"uint32\"}],\"name\":\"MaxStalenessPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct OperatorSet\",\"name\":\"operatorSet\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OperatorSetOwnerUpdated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"internalType\":\"struct OperatorSet\",\"name\":\"operatorSet\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"referenceTimestamp\",\"type\":\"uint32\"}],\"name\":\"getOperatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"internalType\":\"struct OperatorSet\",\"name\":\"operatorSet\",\"type\":\"tuple\"}],\"name\":\"getOperatorSetOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"internalType\":\"struct OperatorSet\",\"name\":\"operatorSet\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"referenceTimestamp\",\"type\":\"uint32\"}],\"name\":\"getTotalStakeWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"internalType\":\"struct OperatorSet\",\"name\":\"operatorSet\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"referenceTimestamp\",\"type\":\"uint32\"}],\"name\":\"isReferenceTimestampSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"internalType\":\"struct OperatorSet\",\"name\":\"operatorSet\",\"type\":\"tuple\"}],\"name\":\"latestReferenceTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"internalType\":\"struct OperatorSet\",\"name\":\"operatorSet\",\"type\":\"tuple\"}],\"name\":\"maxOperatorTableStaleness\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A single `CertificateVerifier` is used for all operatorSets for a given key type\",\"kind\":\"dev\",\"methods\":{\"getOperatorCount((address,uint32),uint32)\":{\"details\":\"Returns 0 if the reference timestamp is not set or the number of operators is 0\",\"params\":{\"operatorSet\":\"The operator set to get the number of operators for\",\"referenceTimestamp\":\"The reference timestamp\"},\"returns\":{\"_0\":\"The number of operators\"}},\"getOperatorSetOwner((address,uint32))\":{\"details\":\"The owner of the OperatorSet is not used by this contract, but can be used by periphery contracts      to gate access control for on-chain operations\",\"params\":{\"operatorSet\":\"The operatorSet to get the owner of\"},\"returns\":{\"_0\":\"The owner\"}},\"getTotalStakeWeights((address,uint32),uint32)\":{\"details\":\"For ECDSA, this function *reverts* if the reference timestamp is not set or the number of operators is 0For BN254, this function returns empty array if the reference timestamp is not set or the number of operators is 0\",\"params\":{\"operatorSet\":\"The operator set to calculate stakes for\",\"referenceTimestamp\":\"The reference timestamp\"},\"returns\":{\"_0\":\"The sum of stake weights for each stake type, empty if the operatorSet has not been updated for the given reference timestamp\"}},\"isReferenceTimestampSet((address,uint32),uint32)\":{\"details\":\"The reference timestamp is set when the operator table is updated\",\"params\":{\"operatorSet\":\"The operatorSet to check\",\"referenceTimestamp\":\"The reference timestamp to check\"},\"returns\":{\"_0\":\"Whether the reference timestamp has been updated\"}},\"latestReferenceTimestamp((address,uint32))\":{\"details\":\"The latest reference timestamp is set when the operator table is updated\",\"params\":{\"operatorSet\":\"The operatorSet to get the latest reference timestamp of\"},\"returns\":{\"_0\":\"The latest reference timestamp, 0 if the operatorSet has never been updated\"}},\"maxOperatorTableStaleness((address,uint32))\":{\"details\":\"A staleness period of 0 allows for certificates to be verified against any timestamp in the pastStaleness periods should not be greater than 0 and less than the update cadence of the `OperatorTables`, since      certificates would be unable to be validated against\",\"params\":{\"operatorSet\":\"The operatorSet to get the max staleness period of\"},\"returns\":{\"_0\":\"The max staleness period\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ArrayLengthMismatch()\":[{\"notice\":\"Thrown when array lengths mismatch\"}],\"CertificateStale()\":[{\"notice\":\"Thrown when the certificate is too stale, per the max staleness period of the operatorSet\"}],\"OnlyTableUpdater()\":[{\"notice\":\"Thrown when the table updater is not caller\"}],\"ReferenceTimestampDoesNotExist()\":[{\"notice\":\"Thrown when the reference timestamp does not exist\"}],\"RootDisabled()\":[{\"notice\":\"Thrown when the global table root is disabled\"}],\"TableUpdateStale()\":[{\"notice\":\"Thrown when the table update is stale\"}],\"VerificationFailed()\":[{\"notice\":\"Thrown when certificate verification fails\"}]},\"events\":{\"MaxStalenessPeriodUpdated((address,uint32),uint32)\":{\"notice\":\"Emitted when the max staleness period of an operatorSet is updated\"},\"OperatorSetOwnerUpdated((address,uint32),address)\":{\"notice\":\"Emitted when the owner of an operatorSet is updated\"}},\"kind\":\"user\",\"methods\":{\"getOperatorCount((address,uint32),uint32)\":{\"notice\":\"Get the number of operators at a given reference timestamp\"},\"getOperatorSetOwner((address,uint32))\":{\"notice\":\"The address of the owner of the OperatorSet\"},\"getTotalStakeWeights((address,uint32),uint32)\":{\"notice\":\"Get the total stake weights for all operators at a given reference timestamp\"},\"isReferenceTimestampSet((address,uint32),uint32)\":{\"notice\":\"Whether the operator table has been updated for a given reference timestamp\"},\"latestReferenceTimestamp((address,uint32))\":{\"notice\":\"The latest reference timestamp of the operator table for a given operatorSet. This value is         updated each time an operator table is updated\"},\"maxOperatorTableStaleness((address,uint32))\":{\"notice\":\"The max staleness period of the operator table for a given operatorSet. This value is AVS-set and         transported by the multichain protocol\"}},\"notice\":\"A base interface that verifies certificates for a given operatorSetThis is a base interface that all curve certificate verifiers (eg. BN254, ECDSA) must implement\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IBaseCertificateVerifier.sol\":\"IBaseCertificateVerifier\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":@eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":@project/=../../contracts/src/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"]},\"sources\":{\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IBaseCertificateVerifier.sol\":{\"keccak256\":\"0x73868ac5e03f51617288695fe3e78dbd9595f7131b4db32419ada6941e12711f\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://c94787fdcc69a43642d0b72c006994aae6dd26e0fcde7cfc175a44d8303b7565\",\"dweb:/ipfs/QmQeaQWds1kSCymh6HYPKBjFMfSDfHUCZREC6khbbNyLA4\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ICrossChainRegistry.sol\":{\"keccak256\":\"0x0b14b4dec4978bd42a8a1483b430854a773f8cbbe09981833055fe260dd04750\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://42828bc630691170efa41caceecf8146f81f1b400cd3fbe2a49a1ab791a722d5\",\"dweb:/ipfs/QmaW3Hey61bXYLwFnBpRPATJqfKZKvZgzZyRtqkaKCGw51\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IOperatorTableCalculator.sol\":{\"keccak256\":\"0xaf9b4bd05cbd4fbd5c466c50ed00f3a11d2f549449a3f247a82595497c39451b\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://d1a15978f7d282beea242a4e9771df4b5f8e2af4b38eaf04e3ab02510cafa51e\",\"dweb:/ipfs/QmVjaydhAzDgeJ1rxakWLoqo9WpGfVh7ajmFYsQZBrPQ16\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/libraries/BN254.sol\":{\"keccak256\":\"0x24cd24d441907f69ab7dbe002e06f656dd8434235cffd59c97b8438c6a9a98fc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://074aa5523e2fe3e6f1b74fb207e08b41d2f6de34412da10e81d7f0b4720942cc\",\"dweb:/ipfs/QmWvdpuvZGeKdEtzaCoAP2gvpggRBwh1cUs4fdWjV9DwW6\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/libraries/OperatorSetLib.sol\":{\"keccak256\":\"0x551df2d7984470e6eaa774d058c3f2af0175044b720aa53a6a156c90881f1812\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://eedb749fda40d45b8803694665d96fb5bec3b010d25cff4baad6e796ac690e41\",\"dweb:/ipfs/QmUNG8gmC6CjrdazKbwqt7fyaBGNbqeEUA4iFka49egGZx\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"ArrayLengthMismatch"},{"inputs":[],"type":"error","name":"CertificateStale"},{"inputs":[],"type":"error","name":"OnlyTableUpdater"},{"inputs":[],"type":"error","name":"ReferenceTimestampDoesNotExist"},{"inputs":[],"type":"error","name":"RootDisabled"},{"inputs":[],"type":"error","name":"TableUpdateStale"},{"inputs":[],"type":"error","name":"VerificationFailed"},{"inputs":[{"internalType":"struct OperatorSet","name":"operatorSet","type":"tuple","components":[{"internalType":"address","name":"avs","type":"address"},{"internalType":"uint32","name":"id","type":"uint32"}],"indexed":false},{"internalType":"uint32","name":"maxStalenessPeriod","type":"uint32","indexed":false}],"type":"event","name":"MaxStalenessPeriodUpdated","anonymous":false},{"inputs":[{"internalType":"struct OperatorSet","name":"operatorSet","type":"tuple","components":[{"internalType":"address","name":"avs","type":"address"},{"internalType":"uint32","name":"id","type":"uint32"}],"indexed":false},{"internalType":"address","name":"owner","type":"address","indexed":false}],"type":"event","name":"OperatorSetOwnerUpdated","anonymous":false},{"inputs":[{"internalType":"struct OperatorSet","name":"operatorSet","type":"tuple","components":[{"internalType":"address","name":"avs","type":"address"},{"internalType":"uint32","name":"id","type":"uint32"}]},{"internalType":"uint32","name":"referenceTimestamp","type":"uint32"}],"stateMutability":"view","type":"function","name":"getOperatorCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"struct OperatorSet","name":"operatorSet","type":"tuple","components":[{"internalType":"address","name":"avs","type":"address"},{"internalType":"uint32","name":"id","type":"uint32"}]}],"stateMutability":"view","type":"function","name":"getOperatorSetOwner","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"struct OperatorSet","name":"operatorSet","type":"tuple","components":[{"internalType":"address","name":"avs","type":"address"},{"internalType":"uint32","name":"id","type":"uint32"}]},{"internalType":"uint32","name":"referenceTimestamp","type":"uint32"}],"stateMutability":"view","type":"function","name":"getTotalStakeWeights","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}]},{"inputs":[{"internalType":"struct OperatorSet","name":"operatorSet","type":"tuple","components":[{"internalType":"address","name":"avs","type":"address"},{"internalType":"uint32","name":"id","type":"uint32"}]},{"internalType":"uint32","name":"referenceTimestamp","type":"uint32"}],"stateMutability":"view","type":"function","name":"isReferenceTimestampSet","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"struct OperatorSet","name":"operatorSet","type":"tuple","components":[{"internalType":"address","name":"avs","type":"address"},{"internalType":"uint32","name":"id","type":"uint32"}]}],"stateMutability":"view","type":"function","name":"latestReferenceTimestamp","outputs":[{"internalType":"uint32","name":"","type":"uint32"}]},{"inputs":[{"internalType":"struct OperatorSet","name":"operatorSet","type":"tuple","components":[{"internalType":"address","name":"avs","type":"address"},{"internalType":"uint32","name":"id","type":"uint32"}]}],"stateMutability":"view","type":"function","name":"maxOperatorTableStaleness","outputs":[{"internalType":"uint32","name":"","type":"uint32"}]}],"devdoc":{"kind":"dev","methods":{"getOperatorCount((address,uint32),uint32)":{"details":"Returns 0 if the reference timestamp is not set or the number of operators is 0","params":{"operatorSet":"The operator set to get the number of operators for","referenceTimestamp":"The reference timestamp"},"returns":{"_0":"The number of operators"}},"getOperatorSetOwner((address,uint32))":{"details":"The owner of the OperatorSet is not used by this contract, but can be used by periphery contracts      to gate access control for on-chain operations","params":{"operatorSet":"The operatorSet to get the owner of"},"returns":{"_0":"The owner"}},"getTotalStakeWeights((address,uint32),uint32)":{"details":"For ECDSA, this function *reverts* if the reference timestamp is not set or the number of operators is 0For BN254, this function returns empty array if the reference timestamp is not set or the number of operators is 0","params":{"operatorSet":"The operator set to calculate stakes for","referenceTimestamp":"The reference timestamp"},"returns":{"_0":"The sum of stake weights for each stake type, empty if the operatorSet has not been updated for the given reference timestamp"}},"isReferenceTimestampSet((address,uint32),uint32)":{"details":"The reference timestamp is set when the operator table is updated","params":{"operatorSet":"The operatorSet to check","referenceTimestamp":"The reference timestamp to check"},"returns":{"_0":"Whether the reference timestamp has been updated"}},"latestReferenceTimestamp((address,uint32))":{"details":"The latest reference timestamp is set when the operator table is updated","params":{"operatorSet":"The operatorSet to get the latest reference timestamp of"},"returns":{"_0":"The latest reference timestamp, 0 if the operatorSet has never been updated"}},"maxOperatorTableStaleness((address,uint32))":{"details":"A staleness period of 0 allows for certificates to be verified against any timestamp in the pastStaleness periods should not be greater than 0 and less than the update cadence of the `OperatorTables`, since      certificates would be unable to be validated against","params":{"operatorSet":"The operatorSet to get the max staleness period of"},"returns":{"_0":"The max staleness period"}}},"version":1},"userdoc":{"kind":"user","methods":{"getOperatorCount((address,uint32),uint32)":{"notice":"Get the number of operators at a given reference timestamp"},"getOperatorSetOwner((address,uint32))":{"notice":"The address of the owner of the OperatorSet"},"getTotalStakeWeights((address,uint32),uint32)":{"notice":"Get the total stake weights for all operators at a given reference timestamp"},"isReferenceTimestampSet((address,uint32),uint32)":{"notice":"Whether the operator table has been updated for a given reference timestamp"},"latestReferenceTimestamp((address,uint32))":{"notice":"The latest reference timestamp of the operator table for a given operatorSet. This value is         updated each time an operator table is updated"},"maxOperatorTableStaleness((address,uint32))":{"notice":"The max staleness period of the operator table for a given operatorSet. This value is AVS-set and         transported by the multichain protocol"}},"version":1}},"settings":{"remappings":["@eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/","@eigenlayer-middleware/=lib/eigenlayer-middleware/","@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/","@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/","@project/=../../contracts/src/","ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/","eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/","eigenlayer-middleware/=lib/eigenlayer-middleware/","erc4626-tests/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/","openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/","openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/","openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/","zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IBaseCertificateVerifier.sol":"IBaseCertificateVerifier"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IBaseCertificateVerifier.sol":{"keccak256":"0x73868ac5e03f51617288695fe3e78dbd9595f7131b4db32419ada6941e12711f","urls":["bzz-raw://c94787fdcc69a43642d0b72c006994aae6dd26e0fcde7cfc175a44d8303b7565","dweb:/ipfs/QmQeaQWds1kSCymh6HYPKBjFMfSDfHUCZREC6khbbNyLA4"],"license":"BUSL-1.1"},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ICrossChainRegistry.sol":{"keccak256":"0x0b14b4dec4978bd42a8a1483b430854a773f8cbbe09981833055fe260dd04750","urls":["bzz-raw://42828bc630691170efa41caceecf8146f81f1b400cd3fbe2a49a1ab791a722d5","dweb:/ipfs/QmaW3Hey61bXYLwFnBpRPATJqfKZKvZgzZyRtqkaKCGw51"],"license":"BUSL-1.1"},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IOperatorTableCalculator.sol":{"keccak256":"0xaf9b4bd05cbd4fbd5c466c50ed00f3a11d2f549449a3f247a82595497c39451b","urls":["bzz-raw://d1a15978f7d282beea242a4e9771df4b5f8e2af4b38eaf04e3ab02510cafa51e","dweb:/ipfs/QmVjaydhAzDgeJ1rxakWLoqo9WpGfVh7ajmFYsQZBrPQ16"],"license":"BUSL-1.1"},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/libraries/BN254.sol":{"keccak256":"0x24cd24d441907f69ab7dbe002e06f656dd8434235cffd59c97b8438c6a9a98fc","urls":["bzz-raw://074aa5523e2fe3e6f1b74fb207e08b41d2f6de34412da10e81d7f0b4720942cc","dweb:/ipfs/QmWvdpuvZGeKdEtzaCoAP2gvpggRBwh1cUs4fdWjV9DwW6"],"license":"MIT"},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/libraries/OperatorSetLib.sol":{"keccak256":"0x551df2d7984470e6eaa774d058c3f2af0175044b720aa53a6a156c90881f1812","urls":["bzz-raw://eedb749fda40d45b8803694665d96fb5bec3b010d25cff4baad6e796ac690e41","dweb:/ipfs/QmUNG8gmC6CjrdazKbwqt7fyaBGNbqeEUA4iFka49egGZx"],"license":"BUSL-1.1"}},"version":1},"id":12}